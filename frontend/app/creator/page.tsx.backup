"use client"

import { useState, useEffect } from 'react'
import ProtectedRoute from '@/components/ProtectedRoute'
import FloatingNavbar from '@/components/FloatingNavbar'
import PaymentModal from '@/components/PaymentModal'
import ImageDialog from '@/components/ImageDialog'
import ProductDesignOverlay from '@/components/ProductDesignOverlay'
import { useAuth } from '@/components/AuthProvider'

interface Product {
  id: string
  name: string
  description: string
  type: string
  brand: string
  model: string
  image: string
  variants: Array<{
    id: string
    name: string
    size: string
    color: string
    color_code: string
    price: number
    in_stock: boolean
    image: string
    image_type?: string
  }>
  options: Array<{
    name: string
    values: string[]
  }>
}

interface AccurateMockup {
  mockup_url: string
  product_id: string
  variant_id: string
  placement_used: {
    x: number
    y: number
    width: number
    height: number
    area: string
    rotation: number
  }
  generation_time: number
  accuracy_score: number
}

export default function SimplifiedCreatorPage() {
  const { user } = useAuth()
  const [currentStep, setCurrentStep] = useState<1 | 2 | 3 | 4>(1)
  
  // Step 1: AI Generation
  const [prompt, setPrompt] = useState('')
  const [selectedModel, setSelectedModel] = useState('flux-kontext')
  const [selectedSize, setSelectedSize] = useState('1024x1024')
  const [selectedStyle, setSelectedStyle] = useState('photorealistic')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedImage, setGeneratedImage] = useState<string | null>(null)
  
  // Step 2: Product Selection
  const [products, setProducts] = useState<Product[]>([])
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null)
  const [selectedVariant, setSelectedVariant] = useState<string>('')
  const [loadingProducts, setLoadingProducts] = useState(false)
  const [selectedProvider, setSelectedProvider] = useState<'printful' | 'printify'>('printful')
  
  // Step 3: Preview & Mockup
  const [accurateMockup, setAccurateMockup] = useState<AccurateMockup | null>(null)
  const [isGeneratingMockup, setIsGeneratingMockup] = useState(false)
  const [productSpecs, setProductSpecs] = useState<any>(null)
  const [loadingSpecs, setLoadingSpecs] = useState(false)
  
  // Step 4: Purchase
  const [showPaymentModal, setShowPaymentModal] = useState(false)
  const [orderTotal, setOrderTotal] = useState(0)
  const [showImageDialog, setShowImageDialog] = useState(false)

  const aiModels = [
    { id: 'flux-kontext', name: 'FLUX.1 Kontext', description: 'Best for photorealistic images' },
    { id: 'sd35', name: 'Stable Diffusion 3.5', description: 'High-quality artistic generation' },
    { id: 'imagen4', name: 'Imagen 4', description: 'Advanced text understanding' }
  ]

  const quickPrompts = [
    "A majestic cosmic wolf howling at nebula stars",
    "Abstract geometric patterns in neon colors",
    "Minimalist mountain landscape at sunset", 
    "Retro synthwave cityscape with palm trees",
    "Watercolor floral design with butterflies"
  ]

  // Load products when component mounts
  useEffect(() => {
    loadProducts()
  }, [selectedProvider])

  const loadProducts = async () => {
    setLoadingProducts(true)
    try {
      const token = (typeof window !== 'undefined' ? localStorage.getItem('access_token') : null) || 'dev-token'
      console.log(`Fetching products from: http://localhost:8000/api/pod/products?provider=${selectedProvider}&category=apparel`)
      
      const response = await fetch(`http://localhost:8000/api/pod/products?provider=${selectedProvider}&category=apparel`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      console.log('Products response status:', response.status)
      
      if (response.ok) {
        const productsData = await response.json()
        console.log('Products loaded successfully:', productsData.length, 'products')
        setProducts(productsData)
      } else {
        console.error('Failed to load products - HTTP', response.status, await response.text())
      }
    } catch (error) {
      console.error('Failed to load products:', error)
      // For demo purposes, you could add fallback mock data here
    } finally {
      setLoadingProducts(false)
    }
  }

  const handleGenerate = async () => {
    if (!prompt.trim()) return
    
    setIsGenerating(true)
    try {
      const token = (typeof window !== 'undefined' ? localStorage.getItem('access_token') : null) || 'dev-token'
      console.log('Generating image with prompt:', prompt.trim())
      
      const response = await fetch('http://localhost:8000/api/ai/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          prompt: prompt.trim(),
          model: selectedModel,
          size: selectedSize,
          style: selectedStyle
        })
      })

      console.log('AI generation response status:', response.status)

      if (response.ok) {
        const data = await response.json()
        console.log('AI generation successful:', data)
        setGeneratedImage(data.url)
      } else {
        console.error('AI generation failed - HTTP', response.status, await response.text())
        // For demo purposes, show a placeholder
        setGeneratedImage(`https://picsum.photos/1024/1024?random=${Date.now()}`)
      }
      
      // Auto-advance to step 2
      setCurrentStep(2)
    } catch (error) {
      console.error('Generation failed:', error)
      // For demo purposes, still show a placeholder
      setGeneratedImage(`https://picsum.photos/1024/1024?random=${Date.now()}`)
      setCurrentStep(2)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleProductSelect = (product: Product) => {
    setSelectedProduct(product)
    if (product.variants.length > 0) {
      setSelectedVariant(product.variants[0].id)
    }
    
    // Load product specs
    loadProductSpecs(product.id)
    
    // Auto-advance to step 3
    setCurrentStep(3)
  }

  const loadProductSpecs = async (productId: string) => {
    setLoadingSpecs(true)
    try {
      const token = typeof window !== 'undefined' ? localStorage.getItem('access_token') : null
      const response = await fetch(`http://localhost:8000/api/pod/product-specs/${productId}?provider=${selectedProvider}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const specsData = await response.json()
        setProductSpecs(specsData.specifications)
      }
    } catch (error) {
      console.error('Error loading product specifications:', error)
    } finally {
      setLoadingSpecs(false)
    }
  }

  const handleOrderProduct = () => {
    if (!selectedProduct || !selectedVariant || !generatedImage) return
    
    const variant = selectedProduct.variants.find(v => v.id === selectedVariant)
    if (!variant) return
    
    const productCost = variant.price
    const shippingCost = 4.99
    const total = productCost + shippingCost
    
    setOrderTotal(total)
    setShowPaymentModal(true)
  }

  const handlePaymentSuccess = (paymentIntent: any) => {
    console.log('Payment successful:', paymentIntent)
    alert('Order placed successfully! You will receive an email confirmation.')
    setShowPaymentModal(false)
    
    // Reset to step 1 for new design
    setCurrentStep(1)
    setPrompt('')
    setGeneratedImage(null)
    setSelectedProduct(null)
    setSelectedVariant('')
    setAccurateMockup(null)
  }

  const handlePaymentError = (error: string) => {
    console.error('Payment failed:', error)
    alert(`Payment failed: ${error}`)
  }

  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return "Step 1: Describe Your Design"
      case 2: return "Step 2: Choose Your Product"
      case 3: return "Step 3: Preview Your Design"
      case 4: return "Step 4: Complete Your Order"
      default: return "Create Your Design"
    }
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen pt-20 pb-6">
        <FloatingNavbar />
        
        {/* Moving background */}
        <div className="cosmic-moving-background">
          <div className="cosmic-orb cosmic-orb-1"></div>
          <div className="cosmic-orb cosmic-orb-2"></div>
          <div className="cosmic-orb cosmic-orb-3"></div>
          <div className="cosmic-orb cosmic-orb-4"></div>
          <div className="cosmic-orb cosmic-orb-5"></div>
        </div>

        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <header className="text-center mb-12 cosmic-animate-fade-in">
            <h1 className="text-display-medium cosmic-text-gradient mb-6 font-bold">AI Design Creator</h1>
            <p className="text-body-large text-white/85 mb-8 font-medium leading-relaxed max-w-3xl mx-auto">Create, customize, and order your designs in 4 simple steps</p>
            
            {/* Progress Steps */}
            <nav className="flex justify-center items-center gap-6 mb-10 cosmic-animate-slide-in-left" aria-label="Creation progress">
              {[1, 2, 3, 4].map((step) => (
                <div key={step} className="flex items-center">
                  <div className={`w-14 h-14 rounded-2xl flex items-center justify-center font-bold text-lg transition-all duration-300 cosmic-interactive shadow-lg ${
                    currentStep >= step 
                      ? 'bg-gradient-to-br from-purple-500 to-pink-500 text-white shadow-purple-500/30 cosmic-animate-bounce-in scale-110' 
                      : 'bg-white/10 text-white/60 border-2 border-white/20'
                  }`} aria-current={currentStep === step ? 'step' : undefined}>
                    {step}
                  </div>
                  {step < 4 && (
                    <div className={`w-16 h-2 mx-3 rounded-full transition-all duration-500 ${
                      currentStep > step ? 'bg-gradient-to-r from-purple-500 to-pink-500 shadow-lg' : 'bg-white/20'
                    }`} />
                  )}
                </div>
              ))}
            </nav>
          </header>

          {/* Main Content */}
          <main className="cosmic-card-premium p-8 cosmic-animate-scale-in border border-white/20" role="main">
            <h2 className="text-h2 text-white mb-8 font-bold cosmic-text-gradient">{getStepTitle()}</h2>
            
            {/* Step 1: AI Generation */}
            {currentStep === 1 && (
              <section className="space-y-8" aria-labelledby="design-prompt">
                <div>
                  <label id="design-prompt" className="block text-base font-semibold text-white mb-4">
                    Describe your design (be specific for best results)
                  </label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value.slice(0, 500))}
                    placeholder="A cosmic wolf howling at neon stars with purple and blue colors..."
                    className="cosmic-input-premium w-full h-40 px-6 py-4 text-base resize-none font-medium leading-relaxed"
                    maxLength={500}
                    aria-describedby="character-count"
                  />
                  <div className="flex justify-between items-center mt-3">
                    <span id="character-count" className="text-sm text-white/70 font-medium">{prompt.length}/500 characters</span>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label className="block text-base font-semibold text-white mb-3">AI Model</label>
                    <select
                      value={selectedModel}
                      onChange={(e) => setSelectedModel(e.target.value)}
                      className="cosmic-input-premium w-full py-4 px-6 text-base font-medium"
                    >
                      {aiModels.map((model) => (
                        <option key={model.id} value={model.id}>
                          {model.name}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-base font-semibold text-white mb-3">Size</label>
                    <select
                      value={selectedSize}
                      onChange={(e) => setSelectedSize(e.target.value)}
                      className="cosmic-input-premium w-full py-4 px-6 text-base font-medium"
                    >
                      <option value="1024x1024">Square (1024×1024)</option>
                      <option value="1024x768">Landscape (1024×768)</option>
                      <option value="768x1024">Portrait (768×1024)</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-base font-semibold text-white mb-3">Style</label>
                    <select
                      value={selectedStyle}
                      onChange={(e) => setSelectedStyle(e.target.value)}
                      className="cosmic-input-premium w-full py-4 px-6 text-base font-medium"
                    >
                      <option value="photorealistic">Photorealistic</option>
                      <option value="artistic">Artistic</option>
                      <option value="minimalist">Minimalist</option>
                      <option value="abstract">Abstract</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-base font-semibold text-white mb-4">Quick Ideas</label>
                  <div className="flex flex-wrap gap-3">
                    {quickPrompts.map((quickPrompt, index) => (
                      <button
                        key={index}
                        onClick={() => setPrompt(quickPrompt)}
                        className="px-4 py-3 text-sm bg-white/10 hover:bg-white/20 rounded-xl transition-all duration-300 border border-white/20 hover:border-white/40 font-medium hover:scale-105 cosmic-focus-ring"
                      >
                        {quickPrompt.slice(0, 30)}...
                      </button>
                    ))}
                  </div>
                </div>

                <div className="flex justify-center pt-4">
                  <button
                    onClick={handleGenerate}
                    disabled={!prompt.trim() || isGenerating}
                    className="cosmic-button-premium cosmic-button-xl cosmic-focus-ring disabled:opacity-50 font-bold text-xl min-h-[64px] shadow-2xl hover:scale-105 transition-all duration-300"
                  >
                    {isGenerating ? (
                      <span className="flex items-center gap-3">
                        <div className="cosmic-spinner"></div>
                        Generating Design...
                      </span>
                    ) : (
                      <>
                        <span className="mr-3 text-2xl">✨</span>
                        Generate My Design
                      </>
                    )}
                  </button>
                </div>
              </div>
            )}

            {/* Step 2: Product Selection */}
            {currentStep === 2 && (
              <section className="space-y-8" aria-labelledby="product-selection">
                {generatedImage && (
                  <div className="text-center mb-8">
                    <div className="inline-block relative group">
                      <img 
                        src={generatedImage} 
                        alt="Generated design" 
                        className="w-48 h-48 object-cover rounded-2xl border-4 border-purple-500/50 shadow-2xl group-hover:scale-105 transition-transform duration-300"
                      />
                      <div className="absolute inset-0 bg-black/30 rounded-2xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer backdrop-blur-sm"
                           onClick={() => setShowImageDialog(true)}>
                        <span className="text-white text-base font-semibold bg-black/50 px-4 py-2 rounded-lg">View Full Size</span>
                      </div>
                    </div>
                    <p className="text-base text-white/85 mt-4 font-semibold">Your generated design</p>
                  </div>
                )}
                
                <div>
                  <h3 id="product-selection" className="text-h3 font-bold text-white mb-6">Choose Your Product</h3>
                  {loadingProducts ? (
                    <div className="text-center py-16">
                      <div className="cosmic-spinner cosmic-spinner-lg mx-auto mb-4"></div>
                      <p className="text-white/70 text-lg font-medium">Loading products...</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 cosmic-stagger">
                      {products.map((product) => (
                        <article
                          key={product.id}
                          onClick={() => handleProductSelect(product)}
                          className="cosmic-card-premium p-6 cursor-pointer hover:scale-105 transition-all duration-300 border-2 border-transparent hover:border-purple-500/50 group cosmic-focus-ring"
                          tabIndex={0}
                          role="button"
                          aria-label={`Select ${product.name}`}
                        >
                          {product.image && (
                            <img 
                              src={product.image} 
                              alt={product.name}
                              className="w-full h-48 object-cover rounded-xl mb-4 group-hover:scale-105 transition-transform duration-300 shadow-lg"
                            />
                          )}
                          <h4 className="text-base font-bold text-white mb-2">
                            {product.name.replace(/\|.*$/, '').trim()}
                          </h4>
                          <p className="text-sm text-white/70 mb-3 font-medium">{product.type}</p>
                          {product.variants.length > 0 && (
                            <p className="text-lg text-green-400 font-bold">
                              From ${Math.min(...product.variants.map(v => v.price)).toFixed(2)}
                            </p>
                          )}
                        </article>
                      ))}
                    </div>
                  )}
                </div>

                <div className="flex justify-between pt-6">
                  <button
                    onClick={() => setCurrentStep(1)}
                    className="cosmic-button cosmic-button-ghost cosmic-button-lg font-semibold hover:scale-105 transition-all duration-300"
                  >
                    ← Back to Design
                  </button>
                </div>
              </div>
            )}

            {/* Step 3: Preview */}
            {currentStep === 3 && selectedProduct && (
              <section className="space-y-8" aria-labelledby="preview-heading">
                <div className="text-center">
                  <h3 id="preview-heading" className="text-h2 font-bold text-white mb-4">
                    {selectedProduct.name.replace(/\|.*$/, '').trim()}
                  </h3>
                  {selectedVariant && selectedProduct.variants.find(v => v.id === selectedVariant) && (
                    <p className="text-2xl text-green-400 font-bold">
                      ${selectedProduct.variants.find(v => v.id === selectedVariant)?.price.toFixed(2)}
                    </p>
                  )}
                </div>

                {/* Variant Selection */}
                {selectedProduct.variants.length > 0 && (
                  <div className="max-w-md mx-auto">
                    <label className="block text-base font-semibold text-white mb-4 text-center">Select Variant</label>
                    <select
                      value={selectedVariant}
                      onChange={(e) => setSelectedVariant(e.target.value)}
                      className="cosmic-input-premium w-full py-4 px-6 text-base font-medium text-center"
                    >
                      {selectedProduct.variants.map((variant) => (
                        <option key={variant.id} value={variant.id}>
                          {variant.size} {variant.color} - ${variant.price.toFixed(2)}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                {/* Product Mockup */}
                <div className="bg-white/5 rounded-2xl p-8 min-h-[500px] border border-white/20">
                  <ProductDesignOverlay
                    productImage={selectedProduct.image}
                    generatedDesign={generatedImage || undefined}
                    productSpecs={productSpecs}
                    onDesignChange={() => {}}
                    onValidationChange={() => {}}
                  />
                </div>

                <div className="flex justify-between pt-6">
                  <button
                    onClick={() => setCurrentStep(2)}
                    className="cosmic-button cosmic-button-ghost cosmic-button-lg font-semibold hover:scale-105 transition-all duration-300"
                  >
                    ← Choose Different Product
                  </button>
                  <button
                    onClick={() => setCurrentStep(4)}
                    className="cosmic-button-premium cosmic-button-lg font-semibold hover:scale-105 transition-all duration-300"
                  >
                    Proceed to Order →
                  </button>
                </div>
              </div>
            )}

            {/* Step 4: Purchase */}
            {currentStep === 4 && selectedProduct && selectedVariant && (
              <section className="space-y-8" aria-labelledby="order-summary">
                <div className="text-center">
                  <h3 id="order-summary" className="text-h2 font-bold text-white mb-8">Order Summary</h3>
                  
                  <div className="cosmic-card-premium p-8 max-w-lg mx-auto border border-white/20">
                    <div className="flex items-center gap-6 mb-6">
                      <img 
                        src={selectedProduct.image} 
                        alt={selectedProduct.name}
                        className="w-20 h-20 object-cover rounded-xl shadow-lg"
                      />
                      <div className="text-left flex-1">
                        <p className="text-base font-bold text-white mb-2">
                          {selectedProduct.name.replace(/\|.*$/, '').trim()}
                        </p>
                        <p className="text-sm text-white/70 font-medium">
                          {selectedProduct.variants.find(v => v.id === selectedVariant)?.size} - 
                          {selectedProduct.variants.find(v => v.id === selectedVariant)?.color}
                        </p>
                      </div>
                    </div>
                    
                    <div className="border-t border-white/30 pt-6 space-y-4">
                      <div className="flex justify-between text-base">
                        <span className="text-white/80 font-medium">Product:</span>
                        <span className="text-white font-semibold">
                          ${selectedProduct.variants.find(v => v.id === selectedVariant)?.price.toFixed(2)}
                        </span>
                      </div>
                      <div className="flex justify-between text-base">
                        <span className="text-white/80 font-medium">Shipping:</span>
                        <span className="text-white font-semibold">$4.99</span>
                      </div>
                      <div className="flex justify-between text-xl font-bold border-t border-white/30 pt-4">
                        <span className="text-white">Total:</span>
                        <span className="text-green-400">
                          ${((selectedProduct.variants.find(v => v.id === selectedVariant)?.price || 0) + 4.99).toFixed(2)}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="flex justify-between pt-6">
                  <button
                    onClick={() => setCurrentStep(3)}
                    className="cosmic-button cosmic-button-ghost cosmic-button-lg font-semibold hover:scale-105 transition-all duration-300"
                  >
                    ← Back to Preview
                  </button>
                  <button
                    onClick={handleOrderProduct}
                    className="cosmic-button-premium cosmic-button-xl font-bold text-xl shadow-2xl hover:scale-105 transition-all duration-300 min-h-[64px]"
                  >
                    <span className="mr-3">🛍️</span>
                    Complete Order
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Payment Modal */}
      <PaymentModal
        isOpen={showPaymentModal}
        onClose={() => setShowPaymentModal(false)}
        amount={orderTotal}
        productDetails={selectedProduct && selectedVariant ? {
          id: selectedProduct.id,
          name: selectedProduct.name,
          variant: selectedVariant,
          quantity: 1,
          designUrl: generatedImage || ''
        } : undefined}
        onSuccess={handlePaymentSuccess}
        onError={handlePaymentError}
      />

      {/* Image Dialog */}
      <ImageDialog
        isOpen={showImageDialog}
        onClose={() => setShowImageDialog(false)}
        imageUrl={generatedImage || ''}
        title="Your Design"
      />
    </ProtectedRoute>
  )
}